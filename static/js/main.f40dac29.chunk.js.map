{"version":3,"sources":["components/Summary.jsx","components/TransactiionForm.jsx","components/TransactionListItem.jsx","components/TransactionList.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","incomeBox","textAlign","borderRight","paddingBottom","expenseBox","red","color","green","Summary","income","expense","finalBalance","classes","Box","Typography","variant","component","toFixed","Paper","Grid","container","spacing","item","xs","className","TransactiionForm","updateBalance","useState","text","setText","amount","setAmount","InputLabel","TextField","value","onChange","e","target","fullWidth","size","pt","Button","onClick","a","parseFloat","isNaN","list","padding","marginBottom","root","display","alignItems","justifyContent","itemLeft","flexGrow","itemRight","borderColor","TransactionListItem","type","titleArea","borderBottom","margin","TransactionList","items","mt","mb","map","index","length","backgroundColor","minHeight","box","width","maxWidth","App","setIncome","setFinalBalance","setExpense","history","setHistory","prev","lists","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f40dac29.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Typography, Paper, Grid, Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nconst useStyles = makeStyles({\n  incomeBox: {\n    textAlign: \"center\",\n    borderRight: \"1px solid #ddd\",\n    paddingBottom: 16,\n  },\n  expenseBox: {\n    textAlign: \"center\",\n    paddingBottom: 16,\n  },\n  red: {\n      color: 'red'\n  },\n  green: {\n      color: 'green'\n  }\n});\nconst Summary = ({income,expense,finalBalance}) => {\n    const classes = useStyles()\n    return (\n      <Box>\n        <Typography variant=\"h4\" component=\"h4\">\n          Expense Tracker\n        </Typography>\n        <Typography variant=\"h5\" component=\"h5\">\n          Your Balance\n        </Typography>\n        <Typography variant=\"h3\" component=\"h5\">\n          ${finalBalance.toFixed(2)}\n        </Typography>\n        <Paper>\n          <Box>\n            <Grid container spacing={0}>\n              <Grid item xs={6}>\n                <Box className={classes.incomeBox}>\n                  <Typography variant=\"h5\" component=\"h5\">\n                    INCOME\n                  </Typography>\n                  <Typography\n                    className={classes.green}\n                    variant=\"h5\"\n                    component=\"h5\"\n                  >\n                    ${income.toFixed(2)}\n                  </Typography>\n                </Box>\n              </Grid>\n              <Grid item xs={6}>\n                <Box className={classes.expenseBox}>\n                  <Typography variant=\"h5\" component=\"h5\">\n                    EXPENSE\n                  </Typography>\n                  <Typography\n                    className={classes.red}\n                    variant=\"h5\"\n                    component=\"h5\"\n                  >\n                    ${expense.toFixed(2)}\n                  </Typography>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n        </Paper>\n      </Box>\n    );\n}\n\nSummary.propTypes = {\n  income: PropTypes.number,\n  expense: PropTypes.number,\n  finalBalance: PropTypes.number\n};\n\nexport default Summary\n","import React, { useState } from \"react\";\nimport {func} from 'prop-types'\nimport { Box, TextField, InputLabel, Button, Typography } from \"@mui/material\";\nconst TransactiionForm = ({ updateBalance }) => {\n  const [text, setText] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const saveTransactiion = () => {\n    let a = parseFloat(amount);\n    let value = a < 0 ? a * -1 : a\n    if (!isNaN(a)) {\n        updateBalance(value,text,a < 0 ? 0 : 1);\n        setText('')\n        setAmount(0)\n    }\n  };\n  return (\n    <div>\n      <Typography  component=\"h4\" variant=\"h5\">\n        Add New Transaction\n      </Typography>\n      <Box>\n        <InputLabel>Text</InputLabel>\n        <TextField\n          value={text}\n          onChange={(e) => {\n            setText(e.target.value);\n          }}\n          fullWidth\n          size=\"small\"\n          variant=\"outlined\"\n        />\n      </Box>\n\n      <Box>\n        <InputLabel>Amount</InputLabel>\n        <TextField\n          value={amount}\n          onChange={(e) => {\n            setAmount(e.target.value);\n          }}\n          fullWidth\n          size=\"small\"\n          variant=\"outlined\"\n        />\n      </Box>\n      <Box pt={2}>\n        <Button onClick={saveTransactiion} fullWidth variant=\"contained\">\n          Add Transaction\n        </Button>\n      </Box>\n    </div>\n  );\n};\nTransactiionForm.propTypes = {\n  updateBalance: func,\n};\n\nexport default TransactiionForm\n","import React from 'react'\nimport {Paper,Box} from '@mui/material'\nimport { makeStyles } from \"@mui/styles\";\nconst useStyles = makeStyles({\n  list: {\n    padding: 16,\n    marginBottom: 8,\n    borderRight: '5px solid'\n  },\n  root: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"stretch\",\n  },\n  itemLeft: {\n    flexGrow: 1,\n  },\n  itemRight: {\n    \n  },\n  red: {\n    borderColor: 'red'\n  },\n  green: {\n    borderColor: 'green'\n  }\n});\nconst TransactionListItem = ({item}) => {\n    const classes = useStyles()\n    return (\n      <div>\n        <Paper className={`${classes.list} ${item.type === 1 ? classes.green : classes.red}`}>\n          <Box className={classes.root}>\n            <Box className={classes.itemLeft}>{item.text}</Box>\n            <Box className={classes.itemRight}>\n              {item.type === 1 ? \"+\" : \"-\"}${item.amount}\n            </Box>\n          </Box>\n        </Paper>\n      </div>\n    );\n}\n\nexport default TransactionListItem\n","import React from 'react'\nimport {array} from 'prop-types'\nimport TransactionListItem from './TransactionListItem'\nimport { Typography, Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nconst useStyles = makeStyles({\n  titleArea: {\n    borderBottom: \"1px solid #ededed\",\n  },\n  root: {\n    margin: `32px 0`,\n  },\n});\nconst TransactionList = ({items}) => {\n    const classes = useStyles()\n    return (\n      <div className={classes.root}>\n        <Box mt={4} mb={2}>\n          <Typography className={classes.titleArea} component=\"h4\" variant=\"h5\">\n            HISTORY\n          </Typography>\n        </Box>\n        {items.map((item, index) => {\n          return <TransactionListItem key={index} item={item} />;\n        })}\n        {items.length <= 0 && <p>No transaction added yet.</p>}\n      </div>\n    );\n}\nTransactionList.propTypes = {\n    items: array\n}\nexport default TransactionList\n","import { useState } from \"react\";\nimport Summary from \"./components/Summary\";\nimport TransactiionForm from \"./components/TransactiionForm\";\nimport TransactionList from \"./components/TransactionList\";\nimport { Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \"#fdfdfd\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n    padding: 16,\n  },\n  box: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n});\nfunction App() {\n  const classes = useStyles();\n  const [income, setIncome] = useState(0);\n  const [finalBalance, setFinalBalance] = useState(0);\n  const [expense, setExpense] = useState(0);\n  const [history, setHistory] = useState([]);\n\n  const updateBalance = (amount, text, type) => {\n    if (type === 0) setExpense((prev) => prev + amount);\n    else setIncome((prev) => prev + amount);\n    let list = {\n      text: text,\n      amount: amount.toFixed(2),\n      type: type,\n    };\n    let lists = history.slice();\n    lists = [...lists, list];\n    setHistory(lists);\n    if (type === 0) setFinalBalance((prev) => prev - amount);\n    else setFinalBalance((prev) => prev + amount);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Box className={classes.box}>\n        <Summary\n          income={income}\n          expense={expense}\n          finalBalance={finalBalance}\n        />\n        <TransactionList items={history} />\n        <TransactiionForm updateBalance={updateBalance} />\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}