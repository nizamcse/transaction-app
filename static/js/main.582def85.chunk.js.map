{"version":3,"sources":["components/Summary.jsx","components/TransactiionForm.jsx","components/TransactionListItem.jsx","components/TransactionList.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","incomeBox","textAlign","borderRight","paddingBottom","expenseBox","red","color","green","Summary","income","expense","finalBalance","classes","Box","Typography","variant","component","toFixed","Paper","Grid","container","spacing","item","xs","className","TransactiionForm","updateBalance","useState","text","setText","errText","setErrText","amount","setAmount","pt","InputLabel","TextField","value","onChange","e","target","fullWidth","size","pb","length","FormHelperText","Button","onClick","a","parseFloat","isNaN","list","padding","marginBottom","root","display","alignItems","justifyContent","itemLeft","flexGrow","itemRight","borderColor","TransactionListItem","type","titleArea","borderBottom","margin","TransactionList","items","mt","mb","map","index","backgroundColor","minHeight","box","width","maxWidth","App","setIncome","setFinalBalance","setExpense","history","setHistory","prev","lists","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.582def85.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Typography, Paper, Grid, Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nconst useStyles = makeStyles({\n  incomeBox: {\n    textAlign: \"center\",\n    borderRight: \"1px solid #ddd\",\n    paddingBottom: 16,\n  },\n  expenseBox: {\n    textAlign: \"center\",\n    paddingBottom: 16,\n  },\n  red: {\n      color: 'red'\n  },\n  green: {\n      color: 'green'\n  }\n});\nconst Summary = ({income,expense,finalBalance}) => {\n    const classes = useStyles()\n    return (\n      <Box>\n        <Typography variant=\"h4\" component=\"h4\">\n          Expense Tracker\n        </Typography>\n        <Typography variant=\"h5\" component=\"h5\">\n          Your Balance\n        </Typography>\n        <Typography variant=\"h3\" component=\"h5\">\n          ${finalBalance.toFixed(2)}\n        </Typography>\n        <Paper>\n          <Box>\n            <Grid container spacing={0}>\n              <Grid item xs={6}>\n                <Box className={classes.incomeBox}>\n                  <Typography variant=\"h5\" component=\"h5\">\n                    INCOME\n                  </Typography>\n                  <Typography\n                    className={classes.green}\n                    variant=\"h5\"\n                    component=\"h5\"\n                  >\n                    ${income.toFixed(2)}\n                  </Typography>\n                </Box>\n              </Grid>\n              <Grid item xs={6}>\n                <Box className={classes.expenseBox}>\n                  <Typography variant=\"h5\" component=\"h5\">\n                    EXPENSE\n                  </Typography>\n                  <Typography\n                    className={classes.red}\n                    variant=\"h5\"\n                    component=\"h5\"\n                  >\n                    ${expense.toFixed(2)}\n                  </Typography>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n        </Paper>\n      </Box>\n    );\n}\n\nSummary.propTypes = {\n  income: PropTypes.number,\n  expense: PropTypes.number,\n  finalBalance: PropTypes.number\n};\n\nexport default Summary\n","import React, { useState } from \"react\";\nimport {func,number} from 'prop-types'\nimport {\n  FormHelperText,Box,\n  TextField,\n  InputLabel,\n  Button,\n  Typography,\n} from \"@mui/material\";\nconst TransactiionForm = ({ updateBalance, finalBalance }) => {\n  const [text, setText] = useState(\"\");\n  const [errText, setErrText] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const saveTransactiion = () => {\n    let a = parseFloat(amount);\n    let value = a < 0 ? a * -1 : a;\n    if (a)\n      {\n          if (!isNaN(a)) {\n            if (finalBalance < value && a < 0) {\n              setErrText(\"Expense is larger than final balance.\");\n            }\n            else{\n                updateBalance(value, text, a < 0 ? 0 : 1);\n                setText(\"\");\n                setAmount(0);\n                setErrText(\"\");\n            }\n          } else {\n            setErrText(\"You should only input the numbers.\");\n          }\n      }else{\n          setErrText(\"Invalid input.\");\n      }\n  };\n  return (\n    <div>\n      <Typography component=\"h4\" variant=\"h5\">\n        Add New Transaction\n      </Typography>\n      <Box pt={2}>\n        <InputLabel>Text</InputLabel>\n        <TextField\n          value={text}\n          onChange={(e) => {\n            setText(e.target.value);\n          }}\n          fullWidth\n          size=\"small\"\n          variant=\"outlined\"\n        />\n      </Box>\n\n      <Box pt={2}>\n        <InputLabel>Amount</InputLabel>\n        <Box pt={1} pb={1}>\n          <small>(Negative - expense,positiive - income)</small>\n        </Box>\n        <TextField\n          value={amount}\n          onChange={(e) => {\n            setAmount(e.target.value);\n          }}\n          fullWidth\n          size=\"small\"\n          variant=\"outlined\"\n        />\n        {errText.length > 0 && <FormHelperText>{errText}</FormHelperText>}\n      </Box>\n      <Box pt={2}>\n        <Button onClick={saveTransactiion} fullWidth variant=\"contained\">\n          Add Transaction\n        </Button>\n      </Box>\n    </div>\n  );\n};\nTransactiionForm.propTypes = {\n  updateBalance: func,\n  finalBalance: number\n};\n\nexport default TransactiionForm\n","import React from 'react'\nimport {Paper,Box} from '@mui/material'\nimport { makeStyles } from \"@mui/styles\";\nconst useStyles = makeStyles({\n  list: {\n    padding: 16,\n    marginBottom: 8,\n    borderRight: '5px solid'\n  },\n  root: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"stretch\",\n  },\n  itemLeft: {\n    flexGrow: 1,\n  },\n  itemRight: {\n    \n  },\n  red: {\n    borderColor: 'red'\n  },\n  green: {\n    borderColor: 'green'\n  }\n});\nconst TransactionListItem = ({item}) => {\n    const classes = useStyles()\n    return (\n      <div>\n        <Paper className={`${classes.list} ${item.type === 1 ? classes.green : classes.red}`}>\n          <Box className={classes.root}>\n            <Box className={classes.itemLeft}>{item.text}</Box>\n            <Box className={classes.itemRight}>\n              {item.type === 1 ? \"+\" : \"-\"}${item.amount}\n            </Box>\n          </Box>\n        </Paper>\n      </div>\n    );\n}\n\nexport default TransactionListItem\n","import React from 'react'\nimport {array} from 'prop-types'\nimport TransactionListItem from './TransactionListItem'\nimport { Typography, Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nconst useStyles = makeStyles({\n  titleArea: {\n    borderBottom: \"1px solid #ededed\",\n  },\n  root: {\n    margin: `32px 0`,\n  },\n});\nconst TransactionList = ({items}) => {\n    const classes = useStyles()\n    return (\n      <div className={classes.root}>\n        <Box mt={4} mb={2}>\n          <Typography className={classes.titleArea} component=\"h4\" variant=\"h5\">\n            HISTORY\n          </Typography>\n        </Box>\n        {items.map((item, index) => {\n          return <TransactionListItem key={index} item={item} />;\n        })}\n        {items.length <= 0 && <p>No transaction added yet.</p>}\n      </div>\n    );\n}\nTransactionList.propTypes = {\n    items: array\n}\nexport default TransactionList\n","import { useState } from \"react\";\nimport Summary from \"./components/Summary\";\nimport TransactiionForm from \"./components/TransactiionForm\";\nimport TransactionList from \"./components/TransactionList\";\nimport { Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \"#fdfdfd\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n    padding: 16,\n  },\n  box: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n});\nfunction App() {\n  const classes = useStyles();\n  const [income, setIncome] = useState(0);\n  const [finalBalance, setFinalBalance] = useState(0);\n  const [expense, setExpense] = useState(0);\n  const [history, setHistory] = useState([]);\n\n  const updateBalance = (amount, text, type) => {\n    if (type === 0) setExpense((prev) => prev + amount);\n    else setIncome((prev) => prev + amount);\n    let list = {\n      text: text,\n      amount: amount.toFixed(2),\n      type: type,\n    };\n    let lists = history.slice();\n    lists = [...lists, list];\n    setHistory(lists);\n    if (type === 0) setFinalBalance((prev) => prev - amount);\n    else setFinalBalance((prev) => prev + amount);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Box className={classes.box}>\n        <Summary\n          income={income}\n          expense={expense}\n          finalBalance={finalBalance}\n        />\n        <TransactionList items={history} />\n        <TransactiionForm\n          finalBalance={finalBalance}\n          updateBalance={updateBalance}\n        />\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}